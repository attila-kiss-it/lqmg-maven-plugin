<?xml version="1.0" encoding="UTF-8"?>
<!--

    This file is part of Everit - LQMG Maven Plugin.

    Everit - LQMG Maven Plugin is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Everit - LQMG Maven Plugin is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Everit - LQMG Maven Plugin.  If not, see <http://www.gnu.org/licenses/>.

-->
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<body>
  <h1>LQMG Maven Plugin</h1>

  <h2>Introduction</h2>

  <p>This maven plugin can be used to generate QueryDSL metadata classes from Liquibase changeLog files in the way
    that the changeLog files are placed into OSGi bundles.</p>

  <h2>Usage</h2>

  <h3>With configuration in the pom.xml</h3>

  <p>Place a configuration like this into the pom.xml wher you want to generate the QueryDSL files:</p>
  <div class="source">
    <pre>
&lt;plugin&gt;
  &lt;groupId&gt;org.everit.osgi.dev&lt;/groupId&gt;
  &lt;artifactId&gt;lqmg-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0&lt;/version&gt;
  &lt;configuration&gt;
    &lt;defaultSchema&gt;<i>db_schema_in_metadata_classes</i>&lt;/defaultSchema&gt;
    &lt;capability&gt;<i>capability_expression</i>&lt;/capability&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</pre>
  </div>
  <p>After that, you can call the following from the command line:</p>
  <div class="source">
    <pre>mvn package lqmg:generate</pre>
  </div>
  <p>
    The sources will be generated to the src/main/generated/java by default. You can override this via system
    properties. See the <a href="generate-mojo.html">documentation of generate mojo</a> for more details.
  </p>
  <p>
    It is important to add <strong>package</strong> before the plugin goal if that project contains the liquibase
    capability where we run the goal of the plugin.
  </p>

  <h3>Generating sources when there are compilation errors</h3>
  <p>
    It might happen that <strong>package</strong> cannot be done on the module as it has compilation errors. In that
    case the following command can help (assuming that maven-bundle-plugin is used to generate the OSGi MANIFEST
    headers):
  </p>
  <div class="source">
    <pre>mvn process-resources bundle:manifest lqmg:generate -Dlqmg.capability=<i>capabilityExpr</i></pre>
  </div>
  <p>With that command, no compilation will be done. Only the MANIFEST will be created by maven-bundle-plugin and
    the necessary changelogs will be copied from src/main/resources to target/classes. By running this command, the
    code generator will use target/classes as the root of the OSGi bundle.</p>

  <h3>Running code generation without pom configuration</h3>
  <p>In case there is no pom configuration, the full name of the maven plugin must be provided:</p>
  <div class="source">
    <pre>mvn package org.everit.osgi.dev:lqmg-maven-plugin:generate -Dlqmg.capability=<i>capabilityExpr</i></pre>
  </div>
</body>
</html>